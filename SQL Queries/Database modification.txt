DELIMITER //

CREATE FUNCTION FindCost(OrderIDToVerify INT)
RETURNS INT
BEGIN
RETURN(
SELECT Cost
FROM Orders
Where OrderID = OrderIDToVerify);
END;//

DELIMITER  ;

SELECT FindCost(5);
-------------------------------------------------------------------------------------
DELIMITER //

CREATE PROCEDURE GetDiscount(Var INT)
BEGIN
SELECT CASE 
WHEN Quantity >= 20  THEN Cost*0.8
WHEN QUANTITY >= 10 THEN Cost*0.9
END AS CostAfterDiscount
FROM Orders
Where OrderID = Var;
END;//

DELIMITER ;

CALL GetDiscount(5);

-------------------------------------------------------------------------------------------------
DELIMITER //

CREATE TRIGGER ProductSellPriceInsertCheck AFTER INSERT ON Products FOR EACH ROW
BEGIN
	IF NEW.SellPrice <= NEW.BuyPrice THEN
INSERT INTO Notifications(Notification, DateTime)
VALUES (Concat(CAST(NEW.ProductID AS CHAR) , ' was updated with a SellPrice of' ,CAST(NEW.SellPrice AS CHAR), ' which is the same or less than the BuyPrice'),  Now());
END IF;
END;//

DELIMITER ;

SELECT * FROM Notifications;

INSERT INTO Products (ProductID, ProductName, BuyPrice, SellPrice, NumberOfItems)
VALUES
("P8", "product p8", 40, 40, 100);

SELECT * FROM Products;

DELIMITER //

CREATE TRIGGER ProductSellPriceUpdateCheck AFTER UPDATE ON Products FOR EACH ROW
BEGIN
	IF NEW.SellPrice <= NEW.BuyPrice THEN
INSERT INTO Notifications(Notification, DateTime)
VALUES (Concat(CAST(NEW.ProductID AS CHAR) , ' was updated with a SellPrice of' ,CAST(NEW.SellPrice AS CHAR), ' which is the same or less than the BuyPrice'),  Now());
END IF;
END;//

DELIMITER ;

UPDATE Products
SET SellPrice = 60
WHERE ProductID = "P6";

SELECT * FROM Notifications;
DELIMITER //

CREATE TRIGGER NotifyProductDelete AFTER DELETE ON Products FOR EACH ROW
BEGIN
INSERT INTO Notifications(Notification, DateTime)
VALUES (Concat('The product with ', CAST(OLD.ProductID AS CHAR) , ' was deleted'),  Now());
END;//

DELIMITER ;

DELETE FROM Products
WHERE ProductID = "P3";

SELECT * FROM Notifications;

--------------------------------------------------------------------------------------

Select OrderID, ProductID, Quantity, Date
From Orders 

CREATE Index IdxClientID ON Orders(ClientID);

EXPLAIN SELECT * FROM Orders WHERE ClientID ='Cl1'; 

ALTER TABLE Employees ADD COLUMN ReverseFullName VARCHAR(200);
UPDATE Employees SET ReverseFullName = CONCAT(substring_index(FullName, ' ', -1), ' ', substring_index(FullName, ' ', 1));
CREATE Index IdxReverseFullName ON Employees(ReverseFullName);
SELECT * FROM Employees WHERE ReverseFullName LIKE 'Tolo%'; 
EXPLAIN SELECT * FROM Employees WHERE ReverseFullName LIKE 'Tolo%'; 

------------------------------------------------------------------------------------

WITH 
CL1CTE AS (SELECT CONCAT('Cl1: ', COUNT(OrderID), 'orders') AS 'Total number of orders' FROM Orders WHERE YEAR(Date) = 2022 AND ClientID = 'Cl1'), 
CL2CTE AS (SELECT CONCAT('Cl2: ', COUNT(OrderID), 'orders') FROM Orders WHERE YEAR(Date) = 2022 AND ClientID = 'Cl2'),
CL3CTE AS (SELECT CONCAT('Cl3: ', COUNT(OrderID), 'orders') FROM Orders WHERE YEAR(Date) = 2022 AND ClientID = 'Cl3') 
SELECT * 
FROM CL1CTE 
UNION 
SELECT * 
FROM CL2CTE 
UNION 
SELECT * 
FROM CL3CTE;

-------------------------------------------------------------------------------------


PREPARE GetOrderDetail FROM '
	SELECT OrderID, Quantity, Cost
	FROM Orders
	WHERE ClientID = ? AND YEAR(Date) = ?
'; 

SET @ID = 'CL1';
SET @Year = '2020';
EXECUTE GetOrderDetail USING @ID, @Year;

-------------------------------------------------------------------------------------

SELECT ProductName, BuyPrice, SellPrice
FROM Products
WHERE ProductID = (
SELECT ProductID
FROM Activity
WHERE Properties->'$Order' = 'True';
)

--------------------------------------------------------------------------------

SELECT CONCAT(Count(o.OrderID), ' (2020)') As 'P4 Product: Quantity Sold'
FROM Products AS p INNER JOIN Orders AS o ON p.ProductID=o.ProductID
WHERE p.ProductID = 'P4' AND Year(o.Date) = 2020
UNION
SELECT CONCAT(Count(o.OrderID), ' (2021)') 
FROM Products AS p INNER JOIN Orders AS o ON p.ProductID=o.ProductID
WHERE p.ProductID = 'P4' AND Year(o.Date) = 2021
UNION
SELECT CONCAT(Count(o.OrderID), ' (2022)') 
FROM Products AS p INNER JOIN Orders AS o ON p.ProductID=o.ProductID
WHERE p.ProductID = 'P4' AND Year(o.Date) = 2022

-----------------------------------------------------------------------------


SELECT c.ClientID, c.ContactNumber, a.Street, a.County, o.OrderID, p.ProductID, p.ProductName, o.Cost, o.Date
FROM Products AS p INNER JOIN Orders AS o ON p.ProductID=o.ProductID INNER JOIN Clients AS c ON o.ClientID=c.ClientID INNER JOIN Addresses AS a ON c.AddressID = a.AddressID
WHERE YEAR(o.Date) = 2021 OR YEAR(o.Date) = 2022
ORDER BY o.Date ASC;

-----------------------------------------------------------------------------------


DELIMITER //

CREATE FUNCTION FindSoldQuantity(ProductIDToVerify VARCHAR(255), YearToVerify INT)
RETURNS INT
BEGIN
RETURN(
SELECT SUM(o.Quantity)
FROM Products AS p INNER JOIN Orders AS o ON p.ProductID=o.ProductID
Where p.ProductID = ProductIDToVerify AND YEAR(o.Date) = YearToVerify
);
END;//

DELIMITER  ;

SELECT FindSoldQuantity('P3', 2021);

---------------------------------------------------------------------------------------


DELIMITER //

CREATE FUNCTION FindAverageCost(YearToVerify INT)
RETURNS INT
BEGIN
RETURN(
SELECT AVG(o.Cost)
FROM Orders AS o 
Where YEAR(o.Date) = YearToVerify
);
END;//

DELIMITER  ;

SELECT FindAverageCost(2022);

----------------------------------------------------------------------------------------------


