CREATE TABLE Clients (
    ClientID INT NOT NULL,
    FullName VARCHAR(100) NOT NULL,
    PhoneNumber INT NOT NULL ,
    UNIQUE (PhoneNumber),
    PRIMARY KEY (ClientID)
);

SHOW COLUMNS FROM Clients;

---------------------------------------------------

CREATE TABLE Items (
    ItemID INT NOT NULL,
    ItemName VARCHAR(100) NOT NULL,
    Price Decimal(5,2) NOT NULL ,
    PRIMARY KEY (ItemID)
);


SHOW COLUMNS FROM Items;
------------------------------------------------------
CREATE TABLE Orders (
    OrderID INT NOT NULL,
    ClientID INT NOT NULL,
    ItemID INT NOT NULL,
    Quantity INT NOT NULL,
    COST Decimal(6,2) NOT NULL,
    PRIMARY KEY (OrderID),
    FOREIGN KEY (ClientID) REFERENCES Clients(ClientID),
    FOREIGN KEY (ItemID) REFERENCES Items(ItemID),
    CHECK (Quantity<4)
);
SHOW COLUMNS FROM Orders;
------------------------------------------------------------------------

CREATE TABLE Staff (StaffID INT NOT NULL PRIMARY KEY, PhoneNumber INT NOT NULL UNIQUE, FullName VARCHAR(100) NOT NULL);   
----------------------------------------------------------------------------
CREATE TABLE ContractInfo (ContractID INT NOT NULL PRIMARY KEY, StaffID INT NOT NULL, Salary Decimal(7, 2) NOT NULL, Location VARCHAR(50) NOT NULL DEFAULT "Texas", StaffType VARCHAR(20) NOT NULL CHECK (StaffType = "Junior" OR StaffType = "Senior"));

----------------------------------------------------------------------------------

ALTER TABLE ContractInfo ADD CONSTRAINT FK_StaffID_ContractInfo
FOREIGN KEY (StaffID) REFERENCES Staff(StaffID);

----------------------------------------------------------------------------
ALTER TABLE FoodOrders
ADD PRIMARY KEY (OrderID);
-----------------------------------------------------------------------------------------------
ALTER TABLE FoodOrders
MODIFY Quantity int NOT NULL, MODIFY Cost int NOT NULL;
------------------------------------------------------------------------------------------
ALTER TABLE FoodOrders
ADD OrderDate date NOT NULL, ADD CustomerID int NOT NULL, ADD FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID);
----------------------------------------------------------------------------------------------------
ALTER TABLE FoodOrders
DROP COLUMN OrderDate;
-----------------------------------------------------------------------------------------------
ALTER TABLE FoodOrders RENAME COLUMN Order_Status TO DeliveryStatus;
---------------------------------------------------------------------------------------------------
ALTER TABLE FoodOrders CHANGE DeliveryStatus Delivery_Status VARCHAR(15);
--------------------------------------------------------------------------------------------------
ALTER TABLE FoodOrders RENAME OrderOfFood;
------------------------------------------------------------------------------------------------------
SELECT *
FROM Bookings
WHERE BookingSlot > ALL(
	SELECT
	FROM Bookings
	WHERE GuestFirstName = 'Vanessa ' AND GuestLastName = ' McCarthy'
)

SELECT *
FROM Bookings
WHERE BookingSlot > (
	SELECT BookingSlot
	FROM Bookings
	WHERE GuestFirstName = 'Vanessa' AND GuestLastName = 'McCarthy'
);
----------------------------------------------------------------------------------------------------------------------

SELECT *
FROM MenuItems
WHERE Price > All(
	SELECT Price
	FROM MenuItems
	WHERE Type = 'Starters' OR Type = 'Desserts'
);

SELECT *
FROM MenuItems
WHERE Price > (
	SELECT Max(Price)
	FROM MenuItems
	WHERE Type = 'Starters' OR Type = 'Desserts'
);
---------------------------------------------------------------------------------------------------------

SELECT *
FROM MenuItems
WHERE Price = Any(
	SELECT mi.Price
FROM MenuItems AS mi INNER JOIN Menus AS m ON m.ItemID = mi.ItemID

	WHERE mi.Type = 'Starters' AND m.Cuisine = 'Italian'  
);

SELECT *
FROM MenuItems
WHERE Price IN(
	SELECT mi.Price
FROM MenuItems AS mi INNER JOIN Menus AS m ON m.ItemID = mi.ItemID
	WHERE mi.Type = 'Starters' AND m.Cuisine = 'Italian'  
);
-----------------------------------------------------------------------------------------------------------

SELECT *
FROM MenuItems
WHERE NOT EXISTS (
	SELECT *
FROM  TableOrders AS tbo INNER JOIN Menus AS m ON tbo.MenuID = m.MenuID INNER JOIN MenuItems AS mi ON mi.ItemID = m.ItemID
);



SELECT * FROM MenuItems 
WHERE NOT EXISTS (SELECT * FROM TableOrders, Menus WHERE TableOrders.MenuID = Menus.MenuID AND Menus.ItemID = MenuItems.ItemID);

SELECT *
FROM MenuItems 
WHERE ItemID != ALL(
	SELECT m.ItemID
FROM TableOrders AS tbo INNER JOIN Menus AS m ON tbo.MenuID = m.MenuID INNER JOIN MenuItems AS mi ON mi.ItemID = m.ItemID
);

----------------------------------------------------------------------------------------------------------------
SELECT MIN(AveragePrice) AS MinAvg, MAX(AveragePrice) AS MaxAvg
FROM (
SELECT Type, AVG(Price) AS AveragePrice
FROM MenuItems
GROUP BY Type
) AS Average_prices;
--------------------------------------------------------------------------------------------------------------------

INSERT INTO LowCostMenuItems
SELECT ItemID, Name, Price
FROM MenuItems
WHERE Price IN  (
SELECT MIN(Price) AS AveragePrice
FROM MenuItems
GROUP BY Type
);
----------------------------------------------------------------------------------------------
INSERT INTO LowCostMenuItems
SELECT ItemID, Name, Price
FROM MenuItems
WHERE Price = ANY  (
SELECT MIN(Price) AS AveragePrice
FROM MenuItems
GROUP BY Type
);
------------------------------------------------------------------------------------------------------
DELETE FROM LowCostMenuItems
WHERE Price > ALL(
	SELECT MIN(Price) AS p
	FROM MenuItems
	GROUP BY Type
	HAVING p BETWEEN 5 AND 10
);


------------------------------------------------------------------------------------------------------
DELETE FROM LowCostMenuItems
WHERE Price > ALL(
	SELECT MIN(Price)
	FROM MenuItems
	GROUP BY Type
	HAVING Price BETWEEN 5 AND 10
);

----------------------------------------------------------------------------------------------------------------------
CREATE VIEW OrdersView AS SELECT OrderID, Quantity, Cost FROM Orders;
UPDATE OrdersView SET Cost = 200 WHERE OrderID = 2;
RENAME TABLE OrdersView TO ClientsOrdersView;
DROP VIEW ClientsOrdersView;
----------------------------------------------------------------------------------------------------------

SELECT ClientID, OrderID, CEIL(Cost – (Cost_0.05)) AS AfterDiscount,
FROM client_orders
WHERE OrderID = 4
------------------------------------------------------------------------------------------------------------------
SELECT ClientID, OrderID, FORMAT(Cost – (Cost_0.05),2) AS AfterDiscount,
FROM client_orders
WHERE OrderID = 4
-----------------------------------------------------------------------------------------------------------
SELECT ADDDATE(OrderDate,INTERVAL 30 DAY) AS ExpectedDelDate 
FROM mg_orders;
-------------------------------------------------------------------------------------------------------
SELECT OrderID, ItemID, Quantity, Cost,  OrderDate,COALESCE (DeliveryDate,'NOT DELIVERED'), OrderStatus 
FROM mg_orders;
------------------------------------------------------------------------------------------------------------------
SELECT OrderID, NULLIF(OrderStatus,'In Progress') AS status 
FROM mg_orders;

